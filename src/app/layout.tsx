// 서버 컴포넌트는 아래와 같은 경우에 사용합니다. ✨
// - 사용자와 상호작용하지 않는 경우
// - 백엔드에 엑세스하면서 보안적으로 위험한 정보를 주고 받는 경우

// 클라이언트 컴포넌트는 아래와 같은 경우 사용합니다. ⭐️
// - 서버 컴포넌트로 해결되지 않는 경우
// - 사용자와 상호작용하는 경우
// - useEffect, useState, onClick, onChange와 같은 API를 사용해야 하는 경우
// - useRouter, useParams와 같은 nextjs의 client component API를 사용하는 경우

// 클라이언트 컴포넌트를 사용하기 위해서는 use client 를 선언해주어야 한다.(Next.js에서는 기본적으로 서버 컴포넌트를 사용)
// "use client";

// Server Component의 장점 🌙
// - 간결한 코드: useEffect와 useState와 같은 훅을 사용하지 않아도 되므로, 코드가 더 간결하고 이해하기 쉬워집니다.
// 이로 인해 코드 유지 관리가 쉬워지고, 버그 발생 확률이 줄어들 수 있습니다.
// - 빠른 데이터 엑세스: 데이터베이스와 같은 자원에 접근해야 하는 경우, 서버 컴포넌트는 서버와 데이터베이스가 가까운 위치에서 작동하므로, 더 빠른 속도로 필요한 데이터에 접근할 수 있습니다.
// - 보안: 서버 컴포넌트는 클라이언트에 민감한 정보(예: 데이터베이스 비밀번호)를 전송하지 않습니다. 이로 인해, 필요한 작업을 안전하게 처리하면서 동시에 클라이언트의 보안을 유지할 수 있습니다.
// - 향상된 성능: 서버 컴포넌트는 클라이언트로 JavaScript 코드를 전송하지 않습니다. 이는 전송되는 데이터의 양을 줄이고, 클라이언트의 부하를 줄임으로써 웹사이트의 전반적인 성능을 향상시키는데 도움이 됩니다.

import Link from "next/link";
import "./globals.css";
import type { Metadata } from "next";
import { useEffect, useState } from "react";
import axios from "axios";
import { ITopic } from "@/interfaces/Topic";
import Control from "@/components/Control";

export const metadata: Metadata = {
  title: "Web tutorial",
  description: "Generated by Woohyun",
};

// 기본적인 웹 페이지의 골격
export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // const [topics, setTopics] = useState<ITopic[]>([]);

  // const getTopics = async () => {
  //   const response = await axios.get("http://localhost:9999/topics");
  //   console.log(response.data);
  //   setTopics(response.data);
  // };

  // useEffect(() => {
  //   getTopics();
  // }, []);
  const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}topics`);
  const topics: ITopic[] = response.data;
  console.log(topics);

  return (
    <html>
      <body>
        <h1>
          <Link href="/">WEB</Link>
          {/* Link 컴포넌트를 사용함으로써
          1. 페이지 리로딩이 없어졌다. 
          2. 방문한 페이지를 다운로드 받지 않는다. 
          3. 미리 페이지를 다운로드 한다.(마우스를 올리는 순간 백그라운드에서 다운로드)  
          👉🏻 즉, Link는 Next.js에서 SPA를 쉽게 구현하도록 도와주는 도구이다 !
          */}
        </h1>
        <ol>
          {topics.map((topic) => (
            <li key={topic.id}>
              <Link href={`/read/${topic.id}`}>{topic.title}</Link>
            </li>
          ))}
        </ol>
        {children}
        <Control />
      </body>
    </html>
  );
}
