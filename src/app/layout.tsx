// 서버 컴포넌트는 아래와 같은 경우에 사용합니다. ✨
// - 사용자와 상호작용하지 않는 경우
// - 백엔드에 엑세스하면서 보안적으로 위험한 정보를 주고 받는 경우

// 클라이언트 컴포넌트는 아래와 같은 경우 사용합니다. ⭐️
// - 서버 컴포넌트로 해결되지 않는 경우
// - 사용자와 상호작용하는 경우
// - useEffect, useState, onClick, onChange와 같은 API를 사용해야 하는 경우
// - useRouter, useParams와 같은 nextjs의 client component API를 사용하는 경우

// 클라이언트 컴포넌트를 사용하기 위해서는 use client 를 선언해주어야 한다.(Next.js에서는 기본적으로 서버 컴포넌트를 사용)
"use client";

import Link from "next/link";
import "./globals.css";
import type { Metadata } from "next";
import { useEffect, useState } from "react";
import axios from "axios";

// export const metadata: Metadatsa = {
//   title: "Web tutorial",
//   description: "Generated by Woohyun",
// };

interface ITopic {
  id: number;
  title: string;
  body: string;
}

// 기본적인 웹 페이지의 골격
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [topics, setTopics] = useState<ITopic[]>([]);

  const getTopics = async () => {
    const response = await axios.get("http://localhost:9999/topics");
    console.log(response.data);
    setTopics(response.data);
  };

  useEffect(() => {
    getTopics();
  }, []);
  return (
    <html>
      <body>
        <h1>
          <Link href="/">WEB</Link>
          {/* Link 컴포넌트를 사용함으로써
          1. 페이지 리로딩이 없어졌다. 
          2. 방문한 페이지를 다운로드 받지 않는다. 
          3. 미리 페이지를 다운로드 한다.(마우스를 올리는 순간 백그라운드에서 다운로드)  
          👉🏻 즉, Link는 Next.js에서 SPA를 쉽게 구현하도록 도와주는 도구이다 !
          */}
        </h1>
        <ol>
          {topics.map((topic) => (
            <li key={topic.id}>
              <Link href={`/read/${topic.id}`}>{topic.title}</Link>
            </li>
          ))}
        </ol>
        {children}
        <ul>
          <li>
            <Link href="/create">create</Link>
          </li>
          <li>
            <Link href="/update/id">update</Link>
          </li>
          <li>
            <button>delete</button>
          </li>
        </ul>
      </body>
    </html>
  );
}
